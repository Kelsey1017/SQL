/*I downloaded Spotify data from Kaggle.
I then created a table to insert Spotify data into.
Where I performed analytics on the data using SQL.*/

CREATE TABLE BIT_DB.Spotifydata (
    id               INTEGER        PRIMARY KEY,
    artist_name      VARCHAR        NOT NULL,
    track_name       VARCHAR        NOT NULL,
    track_id         VARCHAR        NOT NULL,
    popularity       INTEGER        NOT NULL,
    danceability     DECIMAL (4, 3) NOT NULL,
    energy           DECIMAL (4, 3) NOT NULL,
    [key]            INTEGER        NOT NULL,
    loudness         DECIMAL (5, 3) NOT NULL,
    mode             INTEGER        NOT NULL,
    speechiness      DECIMAL (5, 4) NOT NULL,
    acousticness     DECIMAL (6, 5) NOT NULL,
    instrumentalness TEXT           NOT NULL,
    liveness         DECIMAL (5, 4) NOT NULL,
    valence          DECIMAL (4, 3) NOT NULL,
    tempo            DECIMAL (6, 3) NOT NULL,
    duration_ms      INTEGER        NOT NULL,
    time_signature   INTEGER        NOT NULL
);

SELECT *
FROM BIT_DB.Spotifydata;

/*Does the song with the most danceability have the most energy and popularity? no*/
SELECT popularity,
    danceability,
    energy
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC;

/*How many different artists are in the list? 35 */
SELECT DISTINCT artist_name
  FROM BIT_DB.Spotifydata;


/*What artist and song is the highest popularity? Olivia Rodrido, "good 4 u"*/
SELECT popularity,
    artist_name,
    track_name
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 1;

/*Which song and artist have the lowest populatiry? BTS "Dynamite"*/
SELECT popularity,
    artist_name,
    track_name
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 1;

/*taking the avg loudness, tempo, danceability, and popularity to see if the factorys' corrilate to equal highest popularity.*/
SELECT track_name,
    artist_name,
    avg(loudness),
    avg(tempo),
    avg(danceability),
    avg(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name,
        track_name
ORDER BY popularity DESC;

/*the track with the highest danceability is 45th on the list for popularity.*/
SELECT track_name,
    artist_name,
    avg(loudness),
    avg(tempo),
    avg(danceability),
    avg(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name,
        track_name
ORDER BY danceability DESC;

SELECT speechiness
FROM BIT_DB.Spotifydata;

SELECT mode
FROM BIT_DB.Spotifydata;

SELECT duration_ms
FROM BIT_DB.Spotifydata;

/*ordering tracks by duration of song from least to greatest */
SELECT duration_ms,
    track_name,
    artist_name
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY duration_ms ASC;

/*What tracks are the most danceable, in descending order with the lowest being .65? */
SELECT track_name,
       artist_name,
       danceability,
       duration_ms
  FROM BIT_DB.Spotifydata
 WHERE danceability > '.65'
 GROUP BY track_name
 ORDER BY danceability DESC;

/*What tracks are the least danceable? */
SELECT track_name,
       artist_name,
       danceability,
       duration_ms
  FROM BIT_DB.Spotifydata
 WHERE danceability < '.65'
 GROUP BY track_name
 ORDER BY danceability ASC;

/*track name and artist ordered by acousticness of track in descending order */
SELECT acousticness,
       track_name,
       artist_name
  FROM BIT_DB.Spotifydata
 ORDER BY acousticness DESC;
;

/*acousticness compared to populatiry */
SELECT acousticness,
       track_name,
       artist_name,
       popularity
  FROM BIT_DB.Spotifydata
 ORDER BY popularity DESC;
 
SELECT artist_name
FROM BIT_DB.Spotifydata
ORDER BY artist_name;

/*Out of 50 tracks, there is 35 artists. A count of how many times an artist is in the data */
SELECT artist_name,
       count(artist_name) 
  FROM BIT_DB.Spotifydata
 GROUP BY artist_name
 HAVING count(artist_name) > 1;
 
/*Top 5 tracks based on popularity*/
SELECT artist_name,
       track_name,
       popularity
  FROM BIT_DB.Spotifydata
 GROUP BY track_name
 ORDER BY popularity DESC
 LIMIT 5;
;
